{
  "alias": "file_exporter2",
  "name": "File Exporter",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 8.5,
    "sizeY": 8,
    "resources": [],
    "templateHtml": "<form *ngIf=\"scheduleEventFormGroup\" [formGroup]=\"scheduleEventFormGroup\" (ngSubmit)=\"createEvent()\">\r\n  <div class=\"mat-content mat-padding\" fxLayout=\"column\">\r\n      \r\n  <div mat-dialog-content fxLayout=\"column\">\r\n\r\n<div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n       <mat-form-field class=\"mat-block\">\r\n      <mat-label>Ftp Url</mat-label>\r\n      <input matInput required formControlName=\"serverUrl\"/>\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field class=\"mat-block\">\r\n      <mat-label>Port</mat-label>\r\n      <input matInput required formControlName=\"port\" type=\"number\" min=\"1\" max=\"65535\"/>\r\n    </mat-form-field>\r\n    \r\n  </div>\r\n\r\n  <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n      <mat-form-field class=\"mat-block\">\r\n      <mat-label>Username</mat-label>\r\n      <input matInput required formControlName=\"username\"/>\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field class=\"mat-block\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput required type=\"password\" formControlName=\"password\"/>\r\n    </mat-form-field>\r\n    \r\n    </div>\r\n    \r\n    <div style=\"padding-bottom: 20px;\" fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n\r\n        <button  mat-raised-button color=\"primary\" \r\n        [disabled]=\"scheduleEventFormGroup.invalid || !scheduleEventFormGroup.dirty || isTestingConnection\" \r\n        type=\"button\"\r\n        (click)=\"testConnection()\">\r\n          Test Connection\r\n        </button>\r\n\r\n        <div class=\"help-block\" *ngIf=\"connectionSuccessfull === true\" style=\"padding-top: 5px;\">\r\n          <span>Connection Successfull</span>\r\n          <mat-icon *ngIf=\"connectionSuccessfull === true\" style=\"color: green;\">check_circle</mat-icon>\r\n        </div>\r\n\r\n        <div class=\"help-block\" *ngIf=\"connectionSuccessfull === false\" style=\"padding-top: 5px;\">\r\n          <span>Check Ftp Credentials</span>\r\n          <mat-icon *ngIf=\"connectionSuccessfull === false\" style=\"color: red;\">error</mat-icon>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n      <mat-form-field class=\"mat-block\">\r\n      <mat-label>Folder</mat-label>\r\n      <input matInput formControlName=\"folder\"/>\r\n    </mat-form-field>\r\n\r\n    </div>\r\n    \r\n     <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n      <mat-form-field class=\"mat-block\">\r\n      <mat-label>Device</mat-label>\r\n      <mat-select formControlName=\"device\">\r\n          <mat-option *ngFor=\"let deviceId of devices\" [value]=\"deviceId.id\">{{ deviceId.name }}</mat-option>\r\n          </mat-select>\r\n    </mat-form-field>\r\n    \r\n    </div>\r\n    \r\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n       <mat-form-field>\r\n          <mat-label>Method</mat-label>\r\n          <mat-select formControlName=\"scheduleMethod\">\r\n            <mat-option value=\"DAILY\">Daily</mat-option>\r\n            <mat-option value=\"WEEKLY\">Weekly</mat-option>\r\n            <mat-option value=\"MONTHLY\">Monthly</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        \r\n         <mat-form-field *ngIf=\"scheduleEventFormGroup.get('scheduleMethod').value === 'WEEKLY'\">\r\n  <mat-label>Day</mat-label>\r\n  <mat-select formControlName=\"scheduleDay\" required type=\"number\">\r\n    <mat-option value=\"1\">Monday</mat-option>\r\n    <mat-option value=\"2\">Tuesday</mat-option>\r\n    <mat-option value=\"3\">Wednesday</mat-option>\r\n    <mat-option value=\"4\">Thursday</mat-option>\r\n    <mat-option value=\"5\">Friday</mat-option>\r\n    <mat-option value=\"6\">Saturday</mat-option>\r\n    <mat-option value=\"7\">Sunday</mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n\r\n<mat-form-field *ngIf=\"scheduleEventFormGroup.get('scheduleMethod').value === 'MONTHLY'\">\r\n  <mat-label>Day</mat-label>\r\n  <input matInput formControlName=\"scheduleDay\" required type=\"number\" min=\"1\" max=\"31\" />\r\n  <mat-error *ngIf=\"scheduleEventFormGroup.get('scheduleDay').invalid && (scheduleEventFormGroup.get('scheduleDay').touched || scheduleEventFormGroup.get('scheduleDay').dirty)\">\r\n  Day must be between 1 and 31.\r\n</mat-error>\r\n</mat-form-field>\r\n    \r\n    </div>\r\n    \r\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n      <mat-form-field class=\"mat-block\">\r\n      <mat-label>Hour</mat-label>\r\n      <input matInput formControlName=\"scheduleHour\" required type=\"number\" min=\"0\" max=\"23\" />\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field class=\"mat-block\">\r\n      <mat-label>Minute</mat-label>\r\n      <input matInput formControlName=\"scheduleMinute\" required type=\"number\" min=\"0\" max=\"59\" />\r\n    </mat-form-field>\r\n    \r\n    </div>\r\n\r\n\r\n    </div>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"scheduleEventFormGroup.invalid || !scheduleEventFormGroup.dirty || !connectionSuccessfull\" type=\"submit\" >\r\n      Create\r\n    </button>\r\n   </div>\r\n\r\n    <div>\r\n      \r\n    </div>\r\n\r\n</form>\r\n",
    "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
    "controllerScript": "let $scope;\r\n\r\nself.onInit = function() {\r\n    self.ctx.ngZone.run(function() {\r\n        init();\r\n        self.ctx.detectChanges(true);\r\n    });\r\n\r\n};\r\n\r\n\r\nfunction init() {\r\n\r\n    $scope = self.ctx.$scope;\r\n\r\n    self.ctx.$scope.connectionSuccessfull = self.ctx.defaultSubscription\r\n    .data;\r\n\r\n    $scope.connectionSuccessfull;\r\n    $scope.isTestingConnection = false;\r\n    const attributeService = $scope.$injector.get(self.ctx\r\n        .servicesMap.get('attributeService'));\r\n    const deviceService = $scope.$injector.get(self.ctx\r\n        .servicesMap.get('deviceService'));\r\n    const ftpService = $scope.$injector.get(self.ctx\r\n        .servicesMap.get('ftpService'));\r\n    const pageLink = self.ctx.pageLink(10);\r\n\r\n    $scope.devices = [{\r\n        name: 'All',\r\n        id: \"-1\"\r\n    }];\r\n\r\n    if (self.ctx.datasources && self.ctx.datasources\r\n        .length && self.ctx.datasources[0].type === 'entity'\r\n        ) {\r\n        let entityId = self.ctx.datasources[0].entityId;\r\n        deviceService.getCustomerDeviceInfos(entityId,\r\n            pageLink).subscribe(e => {\r\n            e.data.forEach(element => {\r\n                $scope.devices.push({\r\n                    name: element.name,\r\n                    id: element.id.id\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n\r\n    $scope.scheduleEventFormGroup = $scope.fb.group({\r\n        serverUrl: ['127.0.0.1'],\r\n        port: [21],\r\n        username: [],\r\n        password: [],\r\n        folder: ['/'],\r\n        device: [$scope.devices[0].id],\r\n        scheduleMethod: ['DAILY'],\r\n        scheduleDay: ['1'],\r\n        scheduleHour: [12],\r\n        scheduleMinute: [30]\r\n\r\n\r\n    });\r\n\r\n    $scope.testConnection = function() {\r\n        $scope.isTestingConnection = true;\r\n\r\n        ftpService.testFtpConnection(\r\n            $scope.scheduleEventFormGroup.value\r\n            .serverUrl,\r\n            $scope.scheduleEventFormGroup.value\r\n            .port,\r\n            $scope.scheduleEventFormGroup.value\r\n            .username,\r\n            $scope.scheduleEventFormGroup.value\r\n            .password).subscribe(\r\n            function success() {\r\n                $scope.connectionSuccessfull = true;\r\n            },\r\n            function fail() {\r\n                $scope.connectionSuccessfull = false;\r\n            });\r\n        $scope.isTestingConnection = false;\r\n    }\r\n\r\n\r\n    $scope.createEvent = function() {\r\n\r\n        const entityId = self.ctx.datasources[0].entity.id;\r\n\r\n        if (entityId.entityType === 'CUSTOMER') {\r\n\r\n            if($scope.scheduleEventFormGroup.value.device === \"-1\"){\r\n                $scope.scheduleEventFormGroup.value.device = [];\r\n            }else{\r\n                $scope.scheduleEventFormGroup.value.device = [\r\n                    {\r\n                    id: $scope.scheduleEventFormGroup.value.device,\r\n                    entityType: 'DEVICE'\r\n                    }];\r\n            }\r\n            ftpService.scheduleEvent(\r\n                entityId.id,\r\n                $scope.scheduleEventFormGroup.value.serverUrl,\r\n                $scope.scheduleEventFormGroup.value.port,\r\n                $scope.scheduleEventFormGroup.value.username,\r\n                $scope.scheduleEventFormGroup.value.password,\r\n                $scope.scheduleEventFormGroup.value.device,\r\n                $scope.scheduleEventFormGroup.value.folder,\r\n                $scope.scheduleEventFormGroup.value.scheduleMethod,\r\n                $scope.scheduleEventFormGroup.value.scheduleDay,\r\n                $scope.scheduleEventFormGroup.value.scheduleHour,\r\n                $scope.scheduleEventFormGroup.value.scheduleMinute\r\n                ).subscribe();\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\nself.onDestroy = function() {\r\n}\r\n\r\nself.onDataUpdated = function() {\r\n        self.ctx.detectChanges();\r\n}\r\n\r\nself.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1,\r\n        dataKeysOptional: true,\r\n        singleEntity: true\r\n    }\r\n}",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"File Exporter\"}"
  }
}