{
  "widgetsBundle": {
    "alias": "test",
    "title": "Ftp Exporter",
    "image": null,
    "description": null,
    "externalId": null,
    "name": "Ftp Exporter"
  },
  "widgetTypes": [
    {
      "alias": "file_exporter2",
      "name": "File Exporter",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 8,
        "resources": [],
        "templateHtml": "<form *ngIf=\"scheduleEventFormGroup\" [formGroup]=\"scheduleEventFormGroup\" (ngSubmit)=\"createEvent()\">\r\n  <div class=\"mat-content mat-padding\" fxLayout=\"column\">\r\n      \r\n  <div mat-dialog-content fxLayout=\"column\">\r\n\r\n  <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n       <mat-form-field class=\"mat-block\">\r\n      <mat-label>Ftp Url</mat-label>\r\n      <input matInput required formControlName=\"serverUrl\" [readonly]=\"connectionSuccessfull || scheduleData\"/>\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field class=\"mat-block\">\r\n      <mat-label>Port</mat-label>\r\n      <input matInput required formControlName=\"port\" type=\"number\" min=\"1\" max=\"65535\" [readonly]=\"connectionSuccessfull || scheduleData\"/>\r\n    </mat-form-field>\r\n    \r\n  </div>\r\n\r\n  <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n      <mat-form-field class=\"mat-block\">\r\n      <mat-label>Username</mat-label>\r\n      <input matInput required formControlName=\"username\" [readonly]=\"connectionSuccessfull || scheduleData\"/>\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field class=\"mat-block\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput required type=\"password\" formControlName=\"password\" [readonly]=\"connectionSuccessfull || scheduleData\"/>\r\n    </mat-form-field>\r\n    \r\n    </div>\r\n    \r\n    <div style=\"padding-bottom: 20px;\" fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n\r\n        <button mat-raised-button color=\"primary\"\r\n          [disabled]=\"scheduleEventFormGroup.invalid || isTestingConnection\"\r\n          type=\"button\"\r\n          (click)=\"testConnection()\"\r\n          [ngStyle]=\"{ 'border': connectionSuccessfull === null ? '2px solid red' : '' }\">\r\n          Test Connection\r\n        </button>\r\n\r\n        <div class=\"help-block\" *ngIf=\"connectionSuccessfull === true\" style=\"padding-top: 5px;\">\r\n          <span>Connection Successfull</span>\r\n          <mat-icon style=\"color: green;\">check_circle</mat-icon>\r\n        </div>\r\n\r\n        <div class=\"help-block\" *ngIf=\"connectionSuccessfull === false\" style=\"padding-top: 5px;\">\r\n          <span>Check Ftp Credentials</span>\r\n          <mat-icon style=\"color: red;\">error</mat-icon>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n      <mat-form-field class=\"mat-block\">\r\n      <mat-label>Folder</mat-label>\r\n      <input matInput formControlName=\"folder\"/>\r\n    </mat-form-field>\r\n\r\n    </div>\r\n    \r\n     <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n      <mat-form-field class=\"mat-block\">\r\n      <mat-label>Device</mat-label>\r\n      <mat-select formControlName=\"device\">\r\n          <mat-option *ngFor=\"let deviceId of devices\" [value]=\"deviceId.id\">{{ deviceId.name }}</mat-option>\r\n          </mat-select>\r\n    </mat-form-field>\r\n    \r\n    </div>\r\n    \r\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n       <mat-form-field>\r\n          <mat-label>Method</mat-label>\r\n          <mat-select formControlName=\"scheduleMethod\">\r\n            <mat-option value=\"DAILY\">Daily</mat-option>\r\n            <mat-option value=\"WEEKLY\">Weekly</mat-option>\r\n            <mat-option value=\"MONTHLY\">Monthly</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        \r\n         <mat-form-field *ngIf=\"scheduleEventFormGroup.get('scheduleMethod').value === 'WEEKLY'\">\r\n  <mat-label>Day</mat-label>\r\n  <mat-select formControlName=\"scheduleDay\" required type=\"number\">\r\n    <mat-option value=\"1\">Monday</mat-option>\r\n    <mat-option value=\"2\">Tuesday</mat-option>\r\n    <mat-option value=\"3\">Wednesday</mat-option>\r\n    <mat-option value=\"4\">Thursday</mat-option>\r\n    <mat-option value=\"5\">Friday</mat-option>\r\n    <mat-option value=\"6\">Saturday</mat-option>\r\n    <mat-option value=\"7\">Sunday</mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n\r\n<mat-form-field *ngIf=\"scheduleEventFormGroup.get('scheduleMethod').value === 'MONTHLY'\">\r\n  <mat-label>Day</mat-label>\r\n  <input matInput formControlName=\"scheduleDay\" required type=\"number\" min=\"1\" max=\"31\" />\r\n  <mat-error *ngIf=\"scheduleEventFormGroup.get('scheduleDay').invalid && (scheduleEventFormGroup.get('scheduleDay').touched || scheduleEventFormGroup.get('scheduleDay').dirty)\">\r\n  Day must be between 1 and 31.\r\n</mat-error>\r\n</mat-form-field>\r\n    \r\n    </div>\r\n    \r\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    \r\n      <mat-form-field class=\"mat-block\">\r\n      <mat-label>Hour</mat-label>\r\n      <input matInput formControlName=\"scheduleHour\" required type=\"number\" min=\"0\" max=\"23\" />\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field class=\"mat-block\">\r\n      <mat-label>Minute</mat-label>\r\n      <input matInput formControlName=\"scheduleMinute\" required type=\"number\" min=\"0\" max=\"59\" />\r\n    </mat-form-field>\r\n    \r\n    </div>\r\n\r\n\r\n    </div>\r\n    \r\n    <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"scheduleEventFormGroup.invalid \r\n    || !connectionSuccessfull \r\n    || scheduleData\" type=\"submit\">\r\n      Create\r\n    </button>\r\n    \r\n    <button mat-raised-button color=\"warn\" type=\"button\" (click)=\"cancelEvent()\" [disabled]=\"!scheduleData\">\r\n        Cancel\r\n    </button>\r\n    \r\n    </div>\r\n    \r\n    <div *ngIf=\"scheduleData\">\r\n        <label>Scheduled Event</label>\r\n          <div style=\"width: 100%; height: 100px; border: solid 2px gray\" [innerHTML]=\"scheduleData\">\r\n          </div>\r\n    </div>\r\n    \r\n   </div>\r\n\r\n    <div>\r\n      \r\n    </div>\r\n\r\n</form>\r\n",
        "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
        "controllerScript": "let $scope;\r\n\r\nself.onInit = function () {\r\n    self.ctx.ngZone.run(function () {\r\n        init();\r\n        self.ctx.detectChanges(true);\r\n    });\r\n\r\n};\r\n\r\n\r\nfunction init() {\r\n\r\n    $scope = self.ctx.$scope;\r\n    const entityId = self.ctx.datasources[0].entity.id;\r\n    \r\n    $scope.connectionSuccessfull;\r\n    $scope.isTestingConnection = false;\r\n    $scope.scheduleData;\r\n\r\n    $scope.toastTargetId = 'file-exporter-widget';\r\n    $scope.devices = [{\r\n        name: 'All',\r\n        id: -1\r\n    }];\r\n\r\n    const attributeService = $scope.$injector.get(self.ctx\r\n        .servicesMap.get('attributeService'));\r\n    const deviceService = $scope.$injector.get(self.ctx\r\n        .servicesMap.get('deviceService'));\r\n    const ftpService = $scope.$injector.get(self.ctx\r\n        .servicesMap.get('ftpService'));\r\n    const pageLink = self.ctx.pageLink(10);\r\n\r\n    if (self.ctx.datasources && self.ctx.datasources\r\n        .length && self.ctx.datasources[0].type === 'entity'\r\n    ) {\r\n        let entityId = self.ctx.datasources[0].entityId;\r\n        deviceService.getCustomerDeviceInfos(entityId,\r\n            pageLink).subscribe(e => {\r\n                e.data.forEach(element => {\r\n                    $scope.devices.push({\r\n                        name: element.name,\r\n                        id: element.id.id\r\n                    });\r\n                });\r\n            });\r\n    }\r\n\r\n    $scope.scheduleEventFormGroup = $scope.fb.group({\r\n        serverUrl: ['127.0.0.1'],\r\n        port: [21],\r\n        username: [],\r\n        password: [],\r\n        folder: ['/'],\r\n        device: [$scope.devices[0].id],\r\n        scheduleMethod: ['DAILY'],\r\n        scheduleDay: ['1'],\r\n        scheduleHour: [12],\r\n        scheduleMinute: [30]\r\n\r\n\r\n    });\r\n\r\n    getData();\r\n    fetchForm();\r\n\r\n    $scope.testConnection = function () {\r\n        $scope.isTestingConnection = true;\r\n\r\n        ftpService.testFtpConnection(\r\n            $scope.scheduleEventFormGroup.value\r\n                .serverUrl,\r\n            $scope.scheduleEventFormGroup.value\r\n                .port,\r\n            $scope.scheduleEventFormGroup.value\r\n                .username,\r\n            $scope.scheduleEventFormGroup.value\r\n                .password, { ignoreErrors: true }).subscribe(\r\n                    function (data) {\r\n                        $scope.connectionSuccessfull = true;\r\n                        $scope.isTestingConnection = false;\r\n                        self.ctx.detectChanges();\r\n                    },\r\n                    function (error) {\r\n                        $scope.connectionSuccessfull = false;\r\n                        $scope.isTestingConnection = false;\r\n                        self.ctx.detectChanges();\r\n                    });\r\n    }\r\n\r\n\r\n    $scope.createEvent = function () {\r\n\r\n        if (entityId.entityType === 'CUSTOMER') {\r\n\r\n            let query;\r\n\r\n            if ($scope.scheduleEventFormGroup.value.device === -1) {\r\n                query = [];\r\n            } else {\r\n                query = [{\r\n                    id: $scope.scheduleEventFormGroup.value.device,\r\n                    entityType: 'DEVICE'\r\n                }];\r\n            }\r\n\r\n            ftpService.scheduleEvent(\r\n                entityId.id,\r\n                $scope.scheduleEventFormGroup.value.serverUrl,\r\n                $scope.scheduleEventFormGroup.value.port,\r\n                $scope.scheduleEventFormGroup.value.username,\r\n                $scope.scheduleEventFormGroup.value.password,\r\n                query,\r\n                $scope.scheduleEventFormGroup.value.folder,\r\n                $scope.scheduleEventFormGroup.value.scheduleMethod,\r\n                $scope.scheduleEventFormGroup.value.scheduleDay,\r\n                $scope.scheduleEventFormGroup.value.scheduleHour,\r\n                $scope.scheduleEventFormGroup.value.scheduleMinute\r\n            ).subscribe(\r\n                function (data) {\r\n                    $scope.showSuccessToast('Event scheduled', 1000, 'top', 'right', self.ctx.toastTargetId);\r\n                    getData();\r\n                        attributeService.saveEntityAttributes(\r\n                        entityId,\r\n                        'SERVER_SCOPE',\r\n                        [\r\n                            {\r\n                                key: 'ftp_details', value: {\r\n                                    serverUrl: $scope.scheduleEventFormGroup.value.serverUrl,\r\n                                    port: $scope.scheduleEventFormGroup.value.port,\r\n                                    username: $scope.scheduleEventFormGroup.value.username,\r\n                                    password: $scope.scheduleEventFormGroup.value.password,\r\n                                    query: query,\r\n                                    folder: $scope.scheduleEventFormGroup.value.folder,\r\n                                    scheduleMethod: $scope.scheduleEventFormGroup.value.scheduleMethod,\r\n                                    scheduleDay: $scope.scheduleEventFormGroup.value.scheduleDay,\r\n                                    scheduleHour: $scope.scheduleEventFormGroup.value.scheduleHour,\r\n                                    scheduleMinute: $scope.scheduleEventFormGroup.value.scheduleMinute\r\n                                }\r\n                            }]\r\n                    ).subscribe();\r\n                    \r\n                    self.ctx.detectChanges();\r\n                },\r\n                function (error) {\r\n                    $scope.showErrorToast('Error', 1000, 'top', 'right', $scope.toastTargetId);\r\n                    self.ctx.detectChanges();\r\n                });\r\n        }\r\n    }\r\n\r\n    $scope.cancelEvent = function () {\r\n\r\n        ftpService.cancelScheduledEvent(entityId.id).subscribe(\r\n            function (data) {\r\n                $scope.showSuccessToast('Event cancelled', 1000, 'top', 'right', self.ctx.toastTargetId);\r\n                $scope.connectionSuccessfull = null;\r\n                getData();\r\n                self.ctx.detectChanges();\r\n            },\r\n            function (error) {\r\n                $scope.showErrorToast('Error', 1000, 'top', 'right', $scope.toastTargetId);\r\n                self.ctx.detectChanges();\r\n            });\r\n    }\r\n\r\n    function getData() {\r\n        ftpService.getScheduledEvent(entityId.id).subscribe(\r\n            function (data) {\r\n                if (data['data'] !== '') {\r\n                    const myData = JSON.parse(data['data']);\r\n\r\n                    if (myData.method === 'DAILY') {\r\n                        $scope.scheduleData = myData.method +\r\n                            ' Hour: ' + myData.hour +\r\n                            ' Minute: ' + myData.minute +\r\n                            ' Devices: ' + myData.deviceList;\r\n                    } else if (myData.method === 'WEEKLY') {\r\n                        let dayOfWeek = '';\r\n                        switch (myData.day) {\r\n                            case 1:\r\n                                dayOfWeek = 'Monday';\r\n                                break;\r\n                            case 2:\r\n                                dayOfWeek = 'Tuesday';\r\n                                break;\r\n                            case 3:\r\n                                dayOfWeek = 'Wednesday';\r\n                                break;\r\n                            case 4:\r\n                                dayOfWeek = 'Thursday';\r\n                                break;\r\n                            case 5:\r\n                                dayOfWeek = 'Friday';\r\n                                break;\r\n                            case 6:\r\n                                dayOfWeek = 'Saturday';\r\n                                break;\r\n                            case 7:\r\n                                dayOfWeek = 'Sunday';\r\n                                break;\r\n                            default:\r\n                                dayOfWeek = '';\r\n                                break;\r\n                        }\r\n\r\n                        $scope.scheduleData = myData.method +\r\n                            ' Day: ' + dayOfWeek +\r\n                            ' Hour: ' + myData.hour +\r\n                            ' Minute: ' + myData.minute +\r\n                            ' Devices: ' + myData.deviceList;\r\n\r\n                    } else {\r\n\r\n                        $scope.scheduleData = myData.method +\r\n                            ' Day: ' + myData.day +\r\n                            ' Hour: ' + myData.hour +\r\n                            ' Minute: ' + myData.minute +\r\n                            ' Devices: ' + myData.deviceList;\r\n                    }\r\n                } else {\r\n                    $scope.scheduleData = null;\r\n                }\r\n                self.ctx.detectChanges();\r\n            },\r\n            function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    function fetchForm() {\r\n\r\n        if (entityId.entityType === 'CUSTOMER') {\r\n\r\n            attributeService.getEntityAttributes(\r\n                entityId,\r\n                'SERVER_SCOPE',\r\n                ['ftp_details']\r\n            ).subscribe(\r\n                function success(data) {\r\n                    $scope.scheduleEventFormGroup.patchValue({\r\n                        serverUrl: data[0].value.serverUrl,\r\n                        port: data[0].value.port,\r\n                        username: data[0].value.username,\r\n                        password: data[0].value.password,\r\n                        folder: data[0].value.folder,\r\n                    });\r\n                },\r\n                function fail(error) {\r\n                    console.log(error);\r\n                }\r\n            );\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\nself.typeParameters = function () {\r\n    return {\r\n        maxDatasources: 1,\r\n        dataKeysOptional: true,\r\n        singleEntity: true\r\n    }\r\n}",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"File Exporter\"}"
      }
    }
  ]
}