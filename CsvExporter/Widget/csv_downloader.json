{
  "widgetsBundle": {
    "alias": "csv_downloader",
    "title": "Csv Downloader",
    "image": null,
    "description": null,
    "externalId": null,
    "name": "Csv Downloader"
  },
  "widgetTypes": [
    {
      "alias": "csv_downloader",
      "name": "Csv Downloader",
      "image": null,
      "description": "",
      "descriptor": {
        "type": "latest",
        "sizeX": 9.5,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<form *ngIf=\"attributeUpdateFormGroup\"\r\n    [formGroup]=\"attributeUpdateFormGroup\"\r\n    (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"mat-content mat-padding\" fxLayout=\"column\">\r\n\r\n        <div mat-dialog-content fxLayout=\"column\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\"\r\n                fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n\r\n                <mat-form-field class=\"mat-block\">\r\n                    <mat-label>Device</mat-label>\r\n                    <mat-select formControlName=\"device\"\r\n                        (selectionChange)=\"onDeviceSelected()\">\r\n                        <mat-option\r\n                            *ngFor=\"let device of devices\"\r\n                            [value]=\"device.id\">\r\n                            {{device.name}}</mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"mat-block\">\r\n                    <mat-label>Data Key</mat-label>\r\n                    <mat-select\r\n                        formControlName=\"timeseriesKey\">\r\n                        <mat-option\r\n                            *ngFor=\"let dataKey of selectedDevice?.dataKeys\"\r\n                            [value]=\"dataKey\">{{ dataKey }}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\"\r\n                fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n\r\n                <mat-form-field class=\"mat-block\">\r\n                    <mat-label>Start Time</mat-label>\r\n                    <input matInput\r\n                        [matDatepicker]=\"startTimePicker\"\r\n                        formControlName=\"startTime\" required\r\n                        readonly>\r\n                    <mat-datepicker-toggle matSuffix\r\n                        [for]=\"startTimePicker\">\r\n                    </mat-datepicker-toggle>\r\n                    <mat-datepicker #startTimePicker>\r\n                    </mat-datepicker>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"mat-block\">\r\n                    <mat-label>End Time</mat-label>\r\n                    <input matInput\r\n                        [matDatepicker]=\"endTimePicker\"\r\n                        formControlName=\"endTime\" required\r\n                        readonly>\r\n                    <mat-datepicker-toggle matSuffix\r\n                        [for]=\"endTimePicker\">\r\n                    </mat-datepicker-toggle>\r\n                    <mat-datepicker #endTimePicker>\r\n                    </mat-datepicker>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n        </div>\r\n        <button mat-raised-button color=\"primary\"\r\n            [disabled]=\"\r\n    attributeUpdateFormGroup.invalid || \r\n    attributeUpdateFormGroup.value.timeseriesKey === 'None' ||\r\n    attributeUpdateFormGroup.value.startTime > attributeUpdateFormGroup.value.endTime\"\r\n            type=\"submit\">\r\n            Download\r\n        </button>\r\n        <small *ngIf=\"attributeUpdateFormGroup.value.startTime > attributeUpdateFormGroup.value.endTime\" style=\"color:red;\">Data Picker Error <mat-icon style=\"color: red;\">error</mat-icon></small>\r\n    </div>\r\n\r\n    <div>\r\n\r\n    </div>\r\n\r\n</form>",
        "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
        "controllerScript": "const limit = 500;\r\n\r\nself.onInit = function () {\r\n    self.ctx.ngZone.run(function () {\r\n        init();\r\n        self.ctx.detectChanges(true);\r\n    });\r\n\r\n};\r\n\r\nfunction init() {\r\n\r\n    const $scope = self.ctx.$scope;\r\n    console.log(self.ctx);\r\n    \r\n    const attributeService = $scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\r\n    const importExportService = $scope.$injector.get(self.ctx.servicesMap.get('importExport'));\r\n    const deviceService = $scope.$injector.get(self.ctx.servicesMap.get('deviceService'));\r\n    const entityService = $scope.$injector.get(self.ctx.servicesMap.get('entityService'));\r\n\r\n    const pageLink = self.ctx.pageLink(10);\r\n    \r\n    $scope.devices = [];\r\n\r\n    $scope.startTime = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000); // 7 days ago\r\n    $scope.endTime = new Date(); // Now\r\n\r\n    if (self.ctx.datasources && self.ctx.datasources\r\n        .length && self.ctx.datasources[0].type === 'entity'\r\n    ) {\r\n        const entityId = self.ctx.datasources[0].entityId;\r\n        deviceService.getCustomerDeviceInfos(entityId,\r\n            pageLink).subscribe(device => {\r\n                device.data.forEach(element => {\r\n                    entityService.getEntityKeys(element.id, '', 'timeseries').subscribe(e => {\r\n                       if(e.length === 0){\r\n                           e.push('None');\r\n                       }else{\r\n                           e.unshift('All');\r\n                       }\r\n                       \r\n                       $scope.devices.push({\r\n                        name: element.name,\r\n                        id: element.id,\r\n                        dataKeys: e\r\n                        });\r\n                        $scope.selectedDevice = $scope.devices[0];\r\n                        $scope.attributeUpdateFormGroup.get('device').setValue($scope.selectedDevice.id);\r\n                        $scope.attributeUpdateFormGroup.get('timeseriesKey').setValue($scope.selectedDevice.dataKeys[0]);\r\n                        console.log($scope.selectedDevice.dataKeys[0]);\r\n                    });\r\n                });\r\n            });\r\n    }\r\n\r\n    $scope.attributeUpdateFormGroup = $scope.fb.group({\r\n        device: [],\r\n        startTime: [$scope.startTime],\r\n        endTime: [$scope.endTime],\r\n        timeseriesKey: []\r\n    });\r\n\r\n\r\n    self.ctx.$scope.onDeviceSelected = function () {\r\n        $scope.selectedDevice = $scope.devices.find(device => device.id === $scope.attributeUpdateFormGroup.get('device').value);\r\n        $scope.attributeUpdateFormGroup.get('timeseriesKey').setValue($scope.selectedDevice.dataKeys[0]);\r\n    };\r\n\r\n    self.ctx.$scope.onSubmit = function () {\r\n\r\n        if ($scope.attributeUpdateFormGroup.value.timeseriesKey === 'All') {\r\n            $scope.attributeUpdateFormGroup.value.timeseriesKey = $scope.selectedDevice.dataKeys\r\n            .filter(key => key !== 'All');\r\n        }else {\r\n            $scope.attributeUpdateFormGroup.value.timeseriesKey = [$scope.attributeUpdateFormGroup.value.timeseriesKey];\r\n        }\r\n\r\n        if($scope.attributeUpdateFormGroup.value.timeseriesKey !== 'None'){\r\n            attributeService.getEntityTimeseries(\r\n            $scope.attributeUpdateFormGroup.value.device, \r\n            $scope.attributeUpdateFormGroup.value.timeseriesKey,\r\n            $scope.attributeUpdateFormGroup.value.startTime.getTime(), \r\n            $scope.attributeUpdateFormGroup.value.endTime.getTime(), \r\n            limit).subscribe(function (data) {\r\n                data.entityId = $scope.selectedDevice.id;\r\n                data.entityName = $scope.selectedDevice.name;\r\n                    exportCsv([data], 'file');\r\n              \r\n            });\r\n        }\r\n        \r\n    };\r\n\r\n    function exportCsv(data, filename) {\r\n        const CSV_TYPE = { extension: 'csv', mimeType: 'text/csv' };\r\n        let colsHead;\r\n        let colsData;\r\n\r\n        if (data && data.length) {\r\n            const dataKeys = Object.keys(data[0]).filter(key => key !== 'entityName' && key !== 'entityId');\r\n            colsHead = `timestamp,date,entityId,entityName,${dataKeys.join(',')}`;\r\n\r\n            colsData = data.flatMap(obj => {\r\n                const entityName = obj.entityName;\r\n                const entityId = obj.entityId;\r\n                const timestamps = {};\r\n\r\n                dataKeys.forEach(key => {\r\n                    if (Array.isArray(obj[key])) {\r\n                        obj[key].forEach(temp => {\r\n                            const { ts, value } = temp;\r\n                            const date = new Date(ts).toISOString();\r\n                            const rowKey = `${ts}`;\r\n\r\n                            if (!timestamps[rowKey]) {\r\n                                timestamps[rowKey] = {\r\n                                    timestamp: ts,\r\n                                    date: date,\r\n                                    entityId,\r\n                                    entityName\r\n                                };\r\n                                dataKeys.forEach(k => (timestamps[rowKey][k] = ''));\r\n                            }\r\n\r\n                            timestamps[rowKey][key] = value;\r\n                        });\r\n                    }\r\n                });\r\n\r\n                return Object.values(timestamps).map(row => {\r\n                    const rowData = [row.timestamp, row.date, row.entityId, row.entityName].concat(\r\n                        dataKeys.map(key => row[key])\r\n                    );\r\n                    return rowData.join(',');\r\n                });\r\n            });\r\n        } else {\r\n            colsHead = '';\r\n            colsData = [];\r\n        }\r\n\r\n        const csvData = `${colsHead}\\n${colsData.join('\\n')}`;\r\n        importExportService.downloadFile(csvData, filename, CSV_TYPE);\r\n    }\r\n\r\n}\r\n\r\nself.typeParameters = function () {\r\n    return {\r\n        dataKeysOptional: true,\r\n        singleEntity: false\r\n    }\r\n}",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Csv Downloader\"}"
      }
    }
  ]
}